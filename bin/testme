#!/usr/bin/env bash

# Initialize variables that could be set by command line
nose_verbosity=2                  # -v: Default nose verbosity to one line per test (like mocha)
run_coverage=0                    # -c Default to not run code coverage, -c will turn on
run_nose=1                        # -n Default to running nose tests, -n will turn off
run_mocha=1                       # -m Default to running mocha tests, -m will turn off
nose_args='server'                # -a: Optional additional argments to nosetests command
mocha_args='-- --recursive tests' # -b: Optional additional arguments to mocha command
cover_args=''                     # -d: Optional additional arguments to cover command

# Use getopts to parse arguments

while getopts "a:b:cd:mnv:" opt; do
    case "$opt" in
    a)  nose_args=$OPTARG
    ;;
    b)  mocha_args=$OPTARG
    ;;
    c)  run_coverage=1
    ;;
    d)  cover_args=$OPTARG
    ;;
    m)  run_mocha=0
    ;;
    n)  run_nose=0
    ;;
    v)  nose_verbosity=$OPTARG
    esac
done

# Drop all processed args so $@ has leftovers
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Uncomment these to debug command line argument processing
#echo "run_coverage=$run_coverage, run_mocha=$run_mocha, run_nose=$run_nose, nose_verbosity=$nose_verbosity"
#echo "nose_args=$nose_args"
#echo "2: mocha_args=$mocha_args"
#echo "cover_args=$cover_args"
#echo "leftovers: $@"

HOST="127.0.0.1"
PORT="5002"

# Set up environment vars to avoid flask errors in Visual Studio Code shells
export LC=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Set database connect string to test DB connect string
export BASE_CONNECT_STRING=$TEST_BASE_CONNECT
# Need to define a full URL for nock, and it needs to match where flask is serving the APIs
# for integration-style client tests that invoke server APIs. Also, the server unit tests
# need to know how to connect to the API server
export API_ROOT="http://$HOST:$PORT"
# Set up our flask app for testing
export FLASK_APP=server/src/server.py
# Ensure we have a secret key defined for testing so that we can test tokens
export BASE_SECRET_KEY=$TEST_BASE_SECRET_KEY
# Ensure that python path includes the current directory (this script should be run from the app root)
export PYTHONPATH=$PYTHONPATH:$PWD/server
# Ensure that the node (javascript command line engine) knows it is running in test mode
export NODE_ENV='test'

# Set variables we'll use to assess what is happening
server_running=0
nose_result=0
mocha_result=0

# If we're running any tests, start the API server
if [ "$run_nose" -gt "0" ] || [ "$run_mocha" -gt "0" ] || [ "$run_coverage" -gt "0" ]; then
  echo "Starting api server on $HOST at port $PORT"
  if [ "$run_coverage" -eq "0" ]; then
    eval "server/bin/python -m flask run --port=$PORT --host=$HOST > logs/testme.log 2>&1" &
  else
    eval "COVERAGE_FILE=.coverage.server coverage run --source server/src,server/src/DataModel,server/src/APIs -m flask run --port=$PORT --host=$HOST > logs/testme.log 2>&1" &
  fi
  server_running=1
fi

# If we are running nose tests, then do it
if [ "$run_nose" -gt "0" ] && [ "$server_running" -gt "0" ]; then
  if [ "$run_coverage" -eq "0" ]; then
    eval "server/bin/nosetests --verbosity=$nose_verbosity $nose_args"
  else
    eval "COVERAGE_FILE=.coverage.client coverage run --source server/src,server/src/DataModel,server/src/APIs server/bin/nosetests --verbosity=$nose_verbosity $nose_args"
  fi
  nose_result=$?
fi

# If we are running mocha tests, then do it
if [ "$run_mocha" -gt "0" ] && [ "$server_running" -gt "0" ]; then
  if [ "$run_coverage" -eq "1" ]; then
    eval "cd client; npm run-script cover $mocha_args"
  else
    eval "cd client; npm test $mocha_args"
  fi
  mocha_result=$?
fi

# If we started the server, send the command to shut down the api server
if [ "$server_running" -gt "0" ]; then
  eval "curl -X POST http://$HOST:$PORT/shutdown"
fi

my_exit=0
if [ "$nose_result" -eq "0" ] && [ "$mocha_result" -eq "0" ]; then
  if [ "$run_coverage" -gt "0" ]; then
    if [ "$run_mocha" -gt "0" ]; then
      eval "cd .."
    fi
    eval "coverage combine"
    eval "coverage report -m --skip-covered"
  fi
  echo "All tests successful!"
else
  my_exit=1
  echo "We have a problem: "
  if [ "$nose_result" -gt "0" ]; then
    echo "--> Failures in nose tests"
  fi
  if [ "$mocha_result" -gt "0" ]; then
    echo "--> Failures in mocha tests"
  fi
fi
exit $my_exit
